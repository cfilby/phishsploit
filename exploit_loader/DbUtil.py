
"""Module containing the DbUtil class.
"""

import os
import psycopg2


class DbUtil(object):
    """Object responsible for handling interactions with a given SQL database.
    """

    def __init__(self, db):
        """Create a new DbUtil object that uses the specified db file.
        :param db_file: File that the DbUtil should connect to or create.
        """
        self.db = db
        self.connection = psycopg2.connect(**self.db)
        self.cursor = self.connection.cursor()
        # self._init_db()

    def _init_db(self):
        """Create new tables in the connected Db if they haven't already been
        created.
        """
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS exploit (
                exploit_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                description   TEXT,
                date          TEXT,
                author        TEXT,
                platform      TEXT,
                type          TEXT,
                port          INTEGER
            );
        """)

        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS exploit_file (
                exploit_id    INTEGER NOT NULL,
                file_name     TEXT NOT NULL,
                content       BLOB NOT NULL,
                FOREIGN KEY (exploit_id) REFERENCES exploit(exploit_id)
            )
        """)

    def insert_exploit(self, id, description, date, author, platform, type,
                       port):
        """Insert an exploit into the Database. Returns the insert id.
        :param id: id of the exploit
        :param description: description associated with the exploit
        :param date: date the exploit was published
        :param author: author who published the exploit
        :param platform: platform the exploit is associated with
        :param type: type associated with the exploit
        :param port: port associated with the exploit
        """
        self.cursor.execute("""INSERT INTO exploit
                                (exploit_id,description,date,author,
                                    platform,type, port)
                                VALUES (%s,%s,%s,%s,%s,%s,%s)
                            """,
                            (id, description, date, author, platform, type,
                                port)
                            )
        return self.cursor.lastrowid

    def insert_exploit_file(self, exploit_id, file_name, file_data):
        """Insert the exploit data into the database.
        :param exploit_id: id of the exploit
        :param file_data: contents of the exploit file
        """
        self.cursor.execute("""
            INSERT INTO exploit_file (exploit_id, file_name, content)
                VALUES (%s, %s, %s)
        """, (exploit_id, file_name, file_data))

    def get_last_exploit(self):
        """Get the highest exploit_id from the database.
        """
        self.cursor.execute("""
            SELECT MAX(exploit_id) FROM exploit;
        """)

        exploit_id = self.cursor.fetchone()[0]
        if exploit_id is None:
            return 0

        return exploit_id

    def commit(self):
        """Commit the database connection changes.
        """
        self.connection.commit()

    def close(self):
        """Close the database connection
        """
        self.cursor.close()
        self.connection.close()
